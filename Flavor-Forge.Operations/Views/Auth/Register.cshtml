@model Flavor_Forge.Entities.User
@{
    ViewBag.Title = "Register";
}
<!-- Link to the IBM Plex Serif font hosted on Google Fonts -->
<link href='https://fonts.googleapis.com/css?family=IBM+Plex+Serif' rel='stylesheet'>

<!-- Root container for the login page layout -->
<div class="login-root">

    <!-- A flexible container with a column layout, filling the entire viewport height -->
    <div class="box-root flex-flex flex-direction--column"
         style="min-height: 100vh; flex-grow: 1">

        <!-- Background container with a white background and padding at the top -->
        <div class="loginbackground box-background--white padding-top--64">

            <!-- Grid container for organizing background elements -->
            <div class="loginbackground-gridContainer">

                <!-- Grid element spanning specific areas defined in the grid -->
                <div class="box-root flex-flex"
                     style="grid-area: top / start / 8 / end">

                    <!-- Inner box with a linear gradient background -->
                    <div class="box-root"
                         style="
                  background-image: linear-gradient(
                    white 0%,
                    rgb(247, 250, 252) 33%
                  );
                  flex-grow: 1;
                "></div>
                </div>
                <!-- Container for a grid element, spanning specific areas of the grid -->
                <div class="box-root flex-flex" style="grid-area: 4 / 2 / auto / 5">
                    <!-- Inner box with a light border and animation applied -->
                    <div class="box-root box-divider--light-all-2 animationLeftRight tans3s"
                         style="flex-grow: 1"></div>
                </div>
                <!-- Container for a grid element, placed at a specific grid position -->
                <div class="box-root flex-flex"
                     style="grid-area: 6 / start / auto / 2">
                    <!-- Inner box with a blue background -->
                    <div class="box-root box-background--blue800"
                         style="flex-grow: 1"></div>
                </div>
                <!-- Container for a grid element, spanning specific areas of the grid -->
                <div class="box-root flex-flex"
                     style="grid-area: 7 / start / auto / 4">
                    <!-- Inner box with a blue background and animation -->
                    <div class="box-root box-background--blue animationLeftRight"
                         style="flex-grow: 1"></div>
                </div>

                <!-- Container for a grid element, positioned in the 8th row and spanning specific columns -->
                <div class="box-root flex-flex" style="grid-area: 8 / 4 / auto / 6">
                    <!-- Inner box with a gray background and animation applied -->
                    <div class="box-root box-background--gray100 animationLeftRight tans3s"
                         style="flex-grow: 1"></div>
                </div>
                <!-- Container for a grid element, positioned on the second row and spanning columns -->
                <div class="box-root flex-flex"
                     style="grid-area: 2 / 15 / auto / end">
                    <!-- Inner box with a cyan background and animation -->
                    <div class="box-root box-background--cyan200 animationRightLeft tans4s"
                         style="flex-grow: 1"></div>
                </div>
                <!-- Container for a grid element, placed in the third row and spanning specific columns -->
                <div class="box-root flex-flex"
                     style="grid-area: 3 / 14 / auto / end">
                    <!-- Inner box with a blue background and animation -->
                    <div class="box-root box-background--blue animationRightLeft"
                         style="flex-grow: 1"></div>
                </div>
                <!-- Container for a grid element, positioned in the 4th row and spanning columns 17 to 20 -->
                <div class="box-root flex-flex"
                     style="grid-area: 4 / 17 / auto / 20">
                    <!-- Inner box with a gray background and animation -->
                    <div class="box-root box-background--gray100 animationRightLeft tans4s"
                         style="flex-grow: 1"></div>
                </div>
                <!-- Container for a grid element, placed in the 5th row and spanning columns 14 to 17 -->
                <div class="box-root flex-flex"
                     style="grid-area: 5 / 14 / auto / 17">
                    <!-- Inner box with a light border and animation applied -->
                    <div class="box-root box-divider--light-all-2 animationRightLeft tans3s"
                         style="flex-grow: 1"></div>
                </div>
            </div>
        </div>
        <div class="box-root padding-top--24 flex-flex flex-direction--column"
             style="flex-grow: 1; z-index: 9">
            <div class="box-root padding-top--48 padding-bottom--24 flex-flex flex-justifyContent--center">
                <h1>
                    Sign Up
                </h1>
            </div>

            <!-- Login form -->
            <div class="formbg-outer">
                <div class="formbg">
                    <!-- Login form -->
                    @using (Html.BeginForm("Register", "Auth"))
                    {
                        @Html.AntiForgeryToken()

                        <!-- Hidden input for an additional CSRF token (if applicable) -->
                        <input type="hidden" name="_csrf" value="7635eb83-1f95-4b32-8788-abec2724a9a4" />
                        <div class="formbg-inner padding-horizontal--48">
                            <!-- Header for the form -->
                            <span class="padding-bottom--15">Sign in to your account</span>

                            <!-- Conditional rendering of an error message -->
                            @if (TempData["ErrorMessage"] != null)
                            {
                                <!-- Display a styled alert box with an error message if TempData contains an error -->
                                <div class="alert alert-danger mb-3">
                                    <i class="fas fa-exclamation-circle me-2"></i>@TempData["ErrorMessage"]
                                </div>
                            }

                            <!-- Registration form -->
                            <form id="stripe-login">
                                <!-- Username or Email input field -->
                                <div class="field padding-bottom--24">
                                    <!-- Label for the username field -->
                                    @Html.LabelFor(m => m.Username, "Username / Email", new { @for = "username" })
                                    <!-- Input field for the username, styled and required -->
                                    @Html.TextBoxFor(m => m.Username, new { @class = "form-control text-lowercase", @id = "username", required = "required" })
                                    <!-- Validation message for the username field -->
                                    @Html.ValidationMessageFor(m => m.Username, "", new { @class = "text-danger" })
                                </div>
                                <!-- Password input field -->
                                <div class="field padding-bottom--24">
                                    <!-- Label for the password field -->
                                    @Html.LabelFor(m => m.Password, "Password", new { @for = "password" })
                                    <!-- Input field for the password, styled and required -->
                                    @Html.PasswordFor(m => m.Password, new { @class = "form-control", @id = "password", required = "required" })
                                    <!-- Validation message for the password field -->
                                    @Html.ValidationMessageFor(m => m.Password, "", new { @class = "text-danger" })
                                </div>
                                <!-- Confirm Password field -->
                                <div class="form-group required">
                                    <!-- Label for the confirm password field -->
                                    <label class="d-flex flex-row align-items-center" for="confirmPassword">
                                        Confirm Password
                                    </label>
                                    <!-- Input field for confirm password, required -->
                                    <input type="password" class="form-control" id="confirmPassword" name="confirmPassword" required="required" />
                                    <!-- Placeholder for client-side validation error messages -->
                                    <span id="passwordError" class="text-danger"></span>
                                </div>

                                <!-- Remember Me Checkbox-->
                                <div class="field field-checkbox padding-bottom--24 flex-flex align-center">
                                    <label for="checkbox">
                                        <input type="checkbox" name="checkbox" /> Remember me
                                    </label>
                                </div>

                                <!-- Submit button -->
                                <div class="field padding-bottom--24">
                                    <button type="submit" name="submit">Sign Up</button>
                                </div>
                            </form>
                        </div>
                    }

                </div>

                <!-- Footer section with links and additional information -->
                <div class="footer-link padding-top--24">
                    <!-- Link to the Login page, generated using Razor syntax -->
                    <span>Already have an account? <a href="@Url.Action("Login","Auth")"> Login</a></span>
                    <div class="listing padding-top--24 padding-bottom--24 flex-flex center-center">
                        <!-- Contact link -->
                        <span><a href="#">Contact</a></span>
                        <!-- Privacy and Terms link -->
                        <span><a href="#">Privacy & terms</a></span>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
@section Scripts {
    <script>
        // Wait until the DOM is fully loaded
        $(document).ready(function () {
            // Attach a submit event handler to the form with the ID 'submitForm'
            $('#submitForm').on('submit', function (e) {
                var password = $('#password').val();
                var confirmPassword = $('#confirmPassword').val();

                // Check if the password and confirm password fields match
                if (password !== confirmPassword) {
                    // Prevent the form from submitting if the passwords do not match
                    e.preventDefault();
                    // Display an error message in the element with the ID 'passwordError'
                    $('#passwordError').text('Passwords do not match');
                    return false;
                }

                // Clear the error message if passwords match
                $('#passwordError').text('');
                return true; // Allow the form to submit
            });

            // Real-time validation: checks passwords as the user types in the confirm password field
            $('#confirmPassword').on('input', function () {
               
                // Retrieve values from the password and confirm password fields
                var password = $('#password').val();
                var confirmPassword = $(this).val();

                // Check if passwords match and provide immediate feedback
                if (password !== confirmPassword) {
                    $('#passwordError').text('Passwords do not match');
                } else {
                    $('#passwordError').text('');
                }
            });
        });
    </script>
}

<style>
    a {
        color: #333;
    }

        a:hover {
            color: #0d6efd;
            text-decoration: none;
        }

    .form-control:focus {
        color: #000;
        background-color: #fff;
        border: 2px solid #0d6efd;
        outline: 0;
        box-shadow: none;
    }

    .btn {
        background: #0d6efd;
        border: #0d6efd;
    }

        .btn:hover {
            background: #0d6efd;
            border: #0d6efd;
        }

    .text-danger {
        color: #dc3545;
        font-size: 0.875rem;
        margin-top: 0.25rem;
    }

    .form-group {
        margin-bottom: 1rem;
    }

    h1 {
        letter-spacing: -1px;
    }

    a {
        color: #0876fc;
        text-decoration: unset;
    }

    .login-root {
        background: #fff;
        display: flex;
        width: 100%;
        min-height: 100vh;
        overflow: hidden;
        font-family: 'IBM Plex Serif', serif;
    }

        .login-root h1,
        .login-root span,
        .login-root label,
        .login-root input,
        .login-root button {
            font-family: 'IBM Plex Serif', serif;
        }

    .loginbackground {
        min-height: 692px;
        position: fixed;
        bottom: 0;
        left: 0;
        right: 0;
        top: 0;
        z-index: 0;
        overflow: hidden;
    }

    .flex-flex {
        display: flex;
    }

    .align-center {
        align-items: center;
    }

    .center-center {
        align-items: center;
        justify-content: center;
    }

    .box-root {
        box-sizing: border-box;
    }

    .flex-direction--column {
        -ms-flex-direction: column;
        flex-direction: column;
    }

    .loginbackground-gridContainer {
        display: -ms-grid;
        display: grid;
        -ms-grid-columns: [start] 1fr [left-gutter] (86.6px)[16] [left-gutter] 1fr [end];
        grid-template-columns: [start] 1fr [left-gutter] repeat(16,86.6px) [left-gutter] 1fr [end];
        -ms-grid-rows: [top] 1fr [top-gutter] (64px)[8] [bottom-gutter] 1fr [bottom];
        grid-template-rows: [top] 1fr [top-gutter] repeat(8,64px) [bottom-gutter] 1fr [bottom];
        justify-content: center;
        margin: 0 -2%;
        transform: rotate(-12deg) skew(-12deg);
    }

    .box-divider--light-all-2 {
        box-shadow: inset 0 0 0 2px #e3e8ee;
    }

    .box-background--blue {
        background-color: #0876fc;
    }

    .box-background--white {
        background-color: #ffffff;
    }

    .box-background--blue800 {
        background-color: #0431f8;
    }

    .box-background--gray100 {
        background-color: #e3e8ee;
    }

    .box-background--cyan200 {
        background-color: #7fd3ed;
    }

    .padding-top--64 {
        padding-top: 64px;
    }

    .padding-top--24 {
        padding-top: 24px;
    }

    .padding-top--48 {
        padding-top: 48px;
    }

    .padding-bottom--24 {
        padding-bottom: 24px;
    }

    .padding-horizontal--48 {
        padding: 48px;
    }

    .padding-bottom--15 {
        padding-bottom: 15px;
    }


    .flex-justifyContent--center {
        -ms-flex-pack: center;
        justify-content: center;
    }

    .formbg {
        margin: 0px auto;
        width: 100%;
        max-width: 448px;
        background: white;
        border-radius: 4px;
        box-shadow: rgba(60, 66, 87, 0.12) 0px 7px 14px 0px, rgba(0, 0, 0, 0.12) 0px 3px 6px 0px;
    }

    span {
        display: block;
        font-size: 20px;
        line-height: 28px;
        color: #1a1f36;
    }

    label {
        margin-bottom: 10px;
    }

    .grid--50-50 {
        display: grid;
        grid-template-columns: 50% 50%;
        align-items: center;
    }

    .field input {
        font-size: 16px;
        line-height: 28px;
        padding: 8px 16px;
        width: 100%;
        min-height: 44px;
        border: unset;
        border-radius: 4px;
        outline-color: rgb(84 105 212 / 0.5);
        background-color: rgb(255, 255, 255);
        box-shadow: rgba(0, 0, 0, 0) 0px 0px 0px 0px, rgba(0, 0, 0, 0) 0px 0px 0px 0px, rgba(0, 0, 0, 0) 0px 0px 0px 0px, rgba(60, 66, 87, 0.16) 0px 0px 0px 1px, rgba(0, 0, 0, 0) 0px 0px 0px 0px;
    }

    button[type="submit"] {
        background-color: #0876fc;
        box-shadow: rgba(0, 0, 0, 0) 0px 0px 0px 0px, rgba(0, 0, 0, 0) 0px 0px 0px 0px, rgba(0, 0, 0, 0.12) 0px 1px 1px 0px, rgb(84, 105, 212) 0px 0px 0px 1px, rgba(0, 0, 0, 0) 0px 0px 0px 0px, rgba(0, 0, 0, 0) 0px 0px 0px 0px, rgba(60, 66, 87, 0.08) 0px 2px 5px 0px;
        color: #fff;
        border: 0;
        font-weight: 600;
        box-sizing: border-box;
        height: 50px;
        outline: 0;
        margin-top: 38px;
        border-radius: 12px;
        text-align: center;
        width: 100%;
        cursor: pointer;
    }

    .field-checkbox input {
        width: 20px;
        height: 15px;
        margin-right: 5px;
        box-shadow: unset;
        min-height: unset;
    }

    .field-checkbox label {
        display: flex;
        align-items: center;
        margin: 0;
    }

    a.ssolink {
        display: block;
        text-align: center;
        font-weight: 600;
    }

    .footer-link span {
        font-size: 14px;
        text-align: center;
    }

    .listing a {
        color: #697386;
        font-weight: 600;
        margin: 0 10px;
    }

    .animationRightLeft {
        animation: animationRightLeft 2s ease-in-out infinite;
    }

    .animationLeftRight {
        animation: animationLeftRight 2s ease-in-out infinite;
    }

    .tans3s {
        animation: animationLeftRight 3s ease-in-out infinite;
    }

    .tans4s {
        animation: animationLeftRight 4s ease-in-out infinite;
    }

    @@keyframes animationLeftRight {
        0% {
            transform: translateX(0px);
        }

        50% {
            transform: translateX(1000px);
        }

        100% {
            transform: translateX(0px);
        }
    }

    @@keyframes animationRightLeft {
        0% {
            transform: translateX(0px);
        }

        50% {
            transform: translateX(-1000px);
        }

        100% {
            transform: translateX(0px);
        }
    }

    .alert {
        padding: 0.75rem 1.25rem;
        margin-bottom: 1rem;
        border: 1px solid transparent;
        border-radius: 0.25rem;
    }

    .alert-danger {
        color: #721c24;
        background-color: #f8d7da;
        border-color: #f5c6cb;
    }

    .mb-3 {
        margin-bottom: 1rem;
    }

    .me-2 {
        margin-right: 0.5rem;
    }
</style>