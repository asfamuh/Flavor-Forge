@model Flavor_Forge.Entities.Recipe
<body class="scroll-bg">
	<div class="container py-4" id="border">
    <h1 class="mb-4" >Add Recipe</h1>

    @using (Html.BeginForm("Add", "Recipe", FormMethod.Post, new { @class = "form-horizontal", enctype = "multipart/form-data" }))
    {
        <!-- Recipe Name Field -->
        <div class="form-group mb-3">
            @Html.Label("RecipeName", "Recipe Name", new { @class = "form-label" })
            @Html.TextBox("RecipeName", null, new { @class = "form-control", placeholder = "Enter recipe name", required = "required" })
        </div>

        <!-- Recipe Image Upload -->
        <div class="form-group mb-3">
            <label for="imageFile" class="form-label">Recipe Image</label>
            <input type="file" class="form-control" id="imageFile" name="imageFile" accept="image/*" required>
            <small class="text-muted">Upload an image of your recipe (max 5MB)</small>
        </div>

        <!-- Ingredients Section -->
        <div id="ingredients-container" class="mb-3">
            <h4>Ingredients</h4>
            <div class="ingredients-list">
                <div class="form-group ingredient-row">
                    <div class="row align-items-center">
                        <div class="col-md-5">
                            <input type="text" name="Ingredients[0].IngredientName"
                                   placeholder="Enter ingredient" class="form-control" required />
                        </div>
                        <div class="col-md-2">
                            <input type="number" name="Ingredients[0].Quantity"
                                   placeholder="Quantity" class="form-control" step="0.1" required />
                        </div>
                        <div class="col-md-3">
                            <select name="Ingredients[0].Unit" class="form-control" required>
                                <option value="">Select Unit</option>
                                <option value="cup">Cup(s)</option>
                                <option value="tbsp">Tablespoon(s)</option>
                                <option value="tsp">Teaspoon(s)</option>
                                <option value="oz">Ounce(s)</option>
                                <option value="lb">Pound(s)</option>
                                <option value="g">Gram(s)</option>
                                <option value="ml">Milliliter(s)</option>
                                <option value="piece">Piece(s)</option>
                                <option value="pinch">Pinch</option>
                                <option value="whole">Whole</option>
                            </select>
                        </div>
                        <div class="col-md-2">
                            <button type="button" class="btn btn-danger btn-sm delete-ingredient">
                                <i class="fas fa-trash"></i> Delete
                            </button>
                        </div>
                    </div>
                </div>
            </div>
            <div class="row mt-2">
                <div class="col-md-12">
                    <button type="button" class="btn btn-secondary w-100" id="addIngredientBtn">
                        <i class="fas fa-plus me-2"></i>Add Another Ingredient
                    </button>
                </div>
            </div>
        </div>

        <!-- Recipe Instructions Field -->
        <div class="form-group mb-3">
            @Html.Label("Instructions", "Instructions", new { @class = "form-label" })
            @Html.TextArea("Instructions", null, new { @class = "form-control", placeholder = "Enter recipe instructions", rows = 4, required = "required" })
        </div>

        <!-- Submit Button -->
        <div class="form-group mt-4">
            <button type="submit" class="btn btn-primary">
                <i class="fas fa-save me-2"></i>Add Recipe
            </button>
        </div>
    }
</div>
</body>
<style>
    #border{
        width: 100%;
        background: white;
        border-radius:5px;
        box-shadow: rgba(60, 66, 87, 0.12) 0px 7px 14px 0px, rgba(0, 0, 0, 0.12) 0px 3px 6px 0px;
    }
    .scroll-bg {
        height: 100%;
        width: 100%;
        position: fixed;
        padding-bottom: 330px;
        background-color: #291b13;
        background-image: url("https://andreivictor.ro/codepen/scroll-bg-animation-pinterest/bg_pasta_grid-3f880df3.jpg");
        background-size: cover;
    }
</style>
<script>
    let ingredientIndex = 1;
    const MAX_INGREDIENTS = 20;

    document.getElementById('addIngredientBtn').addEventListener('click', addIngredient);

    function addIngredient() {
        const container = document.querySelector('.ingredients-list');
        const currentCount = document.querySelectorAll('.ingredient-row').length;

        if (currentCount >= MAX_INGREDIENTS) {
            alert(`Maximum limit of ${MAX_INGREDIENTS} ingredients reached!`);
            return;
        }

        const newRow = document.createElement('div');
        newRow.className = 'form-group ingredient-row mt-2';
        newRow.innerHTML = `
                <div class="row align-items-center">
                    <div class="col-md-5">
                        <input type="text" name="Ingredients[${ingredientIndex}].IngredientName"
                               placeholder="Enter ingredient" class="form-control" required />
                    </div>
                    <div class="col-md-2">
                        <input type="number" name="Ingredients[${ingredientIndex}].Quantity"
                               placeholder="Quantity" class="form-control" step="0.1" required />
                    </div>
                    <div class="col-md-3">
                        <select name="Ingredients[${ingredientIndex}].Unit" class="form-control" required>
                            <option value="">Select Unit</option>
                            <option value="cup">Cup(s)</option>
                            <option value="tbsp">Tablespoon(s)</option>
                            <option value="tsp">Teaspoon(s)</option>
                            <option value="oz">Ounce(s)</option>
                            <option value="lb">Pound(s)</option>
                            <option value="g">Gram(s)</option>
                            <option value="ml">Milliliter(s)</option>
                            <option value="piece">Piece(s)</option>
                            <option value="pinch">Pinch</option>
                            <option value="whole">Whole</option>
                        </select>
                    </div>
                    <div class="col-md-2">
                        <button type="button" class="btn btn-danger btn-sm delete-ingredient">
                            <i class="fas fa-trash"></i> Delete
                        </button>
                    </div>
                </div>`;

        container.appendChild(newRow);
        ingredientIndex++;
        updateAddButtonState();
        attachDeleteListener(newRow.querySelector('.delete-ingredient'));
    }

    function attachDeleteListener(button) {
        button.addEventListener('click', function () {
            deleteIngredient(this);
        });
    }

    function deleteIngredient(button) {
        const ingredientRow = button.closest('.ingredient-row');
        const totalIngredients = document.querySelectorAll('.ingredient-row').length;

        if (totalIngredients > 1) {
            ingredientRow.remove();
            reindexIngredients();
            updateAddButtonState();
        } else {
            alert('Recipe must have at least one ingredient!');
        }
    }

    function reindexIngredients() {
        const ingredients = document.querySelectorAll('.ingredient-row');
        ingredients.forEach((row, index) => {
            const inputs = row.querySelectorAll('input, select');
            inputs.forEach(input => {
                const name = input.getAttribute('name');
                if (name) {
                    input.setAttribute('name', name.replace(/\[\d+\]/, `[${index}]`));
                }
            });
        });
        ingredientIndex = ingredients.length;
    }

    function updateAddButtonState() {
        const addButton = document.getElementById('addIngredientBtn');
        const currentCount = document.querySelectorAll('.ingredient-row').length;

        if (currentCount >= MAX_INGREDIENTS) {
            addButton.disabled = true;
            addButton.innerHTML = `Maximum ${MAX_INGREDIENTS} ingredients reached`;
        } else {
            addButton.disabled = false;
            addButton.innerHTML = 'Add Another Ingredient';
        }
    }

    // Initialize on page load
    document.addEventListener('DOMContentLoaded', function () {
        // Attach delete listener to initial delete button
        const initialDeleteButton = document.querySelector('.delete-ingredient');
        if (initialDeleteButton) {
            attachDeleteListener(initialDeleteButton);
        }
        updateAddButtonState();
    });
</script>